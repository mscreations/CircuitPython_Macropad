if ($PSVersionTable.PSVersion.Major -gt 5) {
    # GetDeviceProperties is only available if running in Powershell 5.1.
    powershell.exe -noprofile -file $MyInvocation.MyCommand.Path
    exit
}

try {
    $OldWindow = $null

    foreach ($Port in ([System.IO.Ports.SerialPort]::GetPortNames())) {
        $Desc = (Get-WmiObject Win32_PnPEntity | Where-Object Name -match "$Port").GetDeviceProperties('DEVPKEY_Device_BusReportedDeviceDesc').deviceProperties.Data
        # CDC2 is the usb_cdc.data serial port
        if ($Desc -match 'CDC2') {
            $ComPort = $Port
        }
    }

    if (!$ComPort) {
        Write-Error 'Could not find MacroPad attached to system.'
        exit
    }

    Write-Host 'Found MacroPad on port ' -NoNewline
    Write-Host $ComPort -ForegroundColor Green

    $Port = [System.IO.Ports.SerialPort]::new($ComPort, 115200)
    # Enable DTR, otherwise Macropad will not detect that it is connected, even though it will receive data.
    # Absolutely necessary on versions 8.0.0-beta.4 and later as a fix was put in that makes it necessary to be
    # connected before allowing a read.
    $Port.DtrEnable = $true
    $Port.Open()

    # Load DLL to retrieve process name. This is used because there is no good way to handle UWP processes
    #       like Calculator or Windows store otherwise.

    # This is how $blob is created.
    # $FilePath = "<Path to ProcessIO.dll>"
    # $File = [System.IO.File]::ReadAllBytes($FilePath)
    # $blob = [System.Convert]::ToBase64String($File)

    $blob = '
    [void][System.Reflection.Assembly]::Load([Convert]::FromBase64String($blob))

    while ($true) {
        try {
            while (!$Port.IsOpen) {
                for ($i = 5; $i -gt 0; $i--) {
                    Write-Host "Port disconnected. Retry in $i seconds.`r" -NoNewline
                    Start-Sleep 1
                }
                $Port.Open()
                if ($Port.IsOpen) {
                    Write-Host "                                       `r" -NoNewline
                }
            }
        }
        catch {
            continue
        }

        $Window = [ProcessID.UwpUtils]::GetActiveProcessName()

        if ($Window -ne $OldWindow) {
            try {
                $Port.WriteLine(('{0}' -f $Window))
                $Port.ReadLine()
            }
            catch {
                continue
            }

            $OldWindow = $Window
        }
        Start-Sleep 1
    }
}
catch {
    Write-Error "Exception occurred: $_"
}
finally {
    Write-Host 'Closing Serial port'
    $Port.Close()
    $Port.Dispose()
    $Port = $null
}
